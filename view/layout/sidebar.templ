package layout

import "strconv"
import "github.com/Orfeo42/admin-panel/utils"
import "github.com/Orfeo42/admin-panel/enum"

templ sidebar() {
	<ul class="navbar-nav bg-gradient-primary sidebar sidebar-dark accordion" id="accordionSidebar">
		<a class="sidebar-brand d-flex align-items-center justify-content-center" href="/">
			<div class="sidebar-brand-icon rotate-n-15">
				<i class="fas fa-laugh-wink"></i>
			</div>
			<div class="sidebar-brand-text mx-3">HTMX Dashboard</div>
		</a>
		@divider("my-0")
		@navItem("/", enum.Home) {
			<i class="fas fa-fw fa-tachometer-alt"></i>
			<span>Home Page</span>
		}
		@divider("")
		@heading("Customers")
		@navItem("/customer/list", enum.CustomerList) {
			<i class="fas fa-fw fa-list-ul"></i>
			<span>Customer List</span>
		}
		/*@navItem("/customer/add", enum.CustomerAdd) {
			<i class="fas fa-fw fa-plus"></i>
			<span>Add Customer</span>
		}*/
		@divider("")
		@heading("Invoices")
		@navItem("/invoice/list", enum.InvoiceList) {
			<i class="fas fa-fw fa-list-ul"></i>
			<span>Invoice List</span>
		}
		@navItem("/invoice/add", enum.InvoiceAdd) {
			<i class="fas fa-fw fa-plus"></i>
			<span>Add Invoice</span>
		}
		/*@divider("")
		@heading("Orders")
		@navItem("/order/list", enum.OrderList) {
			<i class="fas fa-fw fa-list-ul"></i>
			<span>Order List</span>
		}
		@navItem("/order/add", enum.OrderAdd) {
			<i class="fas fa-fw fa-plus"></i>
			<span>Add Order</span>
		}*/
		@divider("d-none d-md-block")
		<!-- Sidebar Toggler (Sidebar) -->
		<div class="text-center d-none d-md-inline">
			<button class="rounded-circle border-0" id="sidebarToggle"></button>
		</div>
	</ul>
}

func isActive(ctx context.Context, page enum.Page) bool {
	return utils.GetPage(ctx) == string(page)
}

func isSubItemActive(ctx context.Context, items []dropDownItemParams) bool {
	for _, item := range items {
		if item.isHeader {
			continue
		}
		if utils.GetPage(ctx) == string(item.page) {
			return true
		}
	}
	return false
}

templ navItem(url string, page enum.Page) {
	<li class={ "nav-item", templ.KV("active", isActive(ctx, page)) }>
		<a class={ "nav-link" } href={ templ.SafeURL(url) }>
			{ children... }
		</a>
	</li>
}

type dropDownItemParams struct {
	isHeader bool
	url      string
	text     string
	page     enum.Page
}

templ dropDownItem(params dropDownItemParams) {
	if (params.isHeader) {
		<h6 class="collapse-header">{ params.text }:</h6>
	} else {
		<a class={ "collapse-item", templ.KV("active", isActive(ctx, params.page)) } href={ templ.SafeURL(params.url) }>{ params.text }</a>
	}
}

type dropDownListParams struct {
	items  []dropDownItemParams
	target string
}

templ dropDownList(params dropDownListParams) {
	<li class={ "nav-item", templ.KV("active", isSubItemActive(ctx, params.items)) }>
		<a
			class={ "nav-link", templ.KV("collapsed", !isSubItemActive(ctx, params.items)), templ.KV("show", isSubItemActive(ctx, params.items)) }
			href="#"
			data-toggle="collapse"
			data-target={ "#" + params.target }
			aria-expanded={ strconv.FormatBool(isSubItemActive(ctx, params.items)) }
			aria-controls={ params.target }
		>
			{ children... }
		</a>
		<div
			id={ params.target }
			class={ "collapse", templ.KV("show", isSubItemActive(ctx, params.items)) }
			data-parent="#accordionSidebar"
		>
			<div class="bg-white py-2 collapse-inner rounded">
				for _, item := range params.items {
					@dropDownItem(item)
				}
			</div>
		</div>
	</li>
}

templ divider(addCssClass string) {
	<hr class={ "sidebar-divider", addCssClass }/>
}

templ heading(text string) {
	<div class="sidebar-heading">
		{ text }
	</div>
}

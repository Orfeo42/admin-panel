package pages

import (
	"github.com/Orfeo42/admin-panel/view/layout"
	"github.com/Orfeo42/admin-panel/repositories"
	"github.com/Orfeo42/admin-panel/utils"
	"strconv"
	"github.com/Orfeo42/admin-panel/view/component"
)

templ CustomerListView(items []repositories.CustomerWithTotals, filter repositories.CustomerFilter) {
	@layout.TableView() {
		<div class="row">
			<div class="col-12 mb-4">
				<h1 class="h3 mb-2 text-gray-800">Lista Cliente</h1>
			</div>
		</div>
		@customerFilter(filter)
		@customerTable(items)
	}
}

templ customerFilter(filter repositories.CustomerFilter) {
	@component.CollapseCard("Filters", "filter") {
		<form hx-get="/customer/filter" hx-target="#data" hx-swap="innerHTML">
			<div class="form-row">
				<div class="form-group col-md-6">
					@component.FormInput(component.FormInputParam{
						Id:          "name",
						Name:        "name",
						Description: "Nome Cliente",
						FormType:    component.Text,
						Value:       utils.FormatStringToForm(filter.Name),
					})
				</div>
				<div class="form-group col-md-6">
					<label for="isPaid">Pagamenti:</label>
					<select class="form-control" name="isPaid" id="isPaid">
						<option value="">Tutti</option>
						<option value="true">Tutti pagamenti chiusi</option>
						<option value="false">Con Pagamenti Aperti</option>
					</select>
				</div>
			</div>
			<div class="form-row">
				<div class="form-group col-md-3">
					@component.FormInput(component.FormInputParam{
						Id:          "totalAmountFrom",
						Name:        "totalAmountFrom",
						Description: "Da Totale Fatturato",
						FormType:    component.Number,
						Value:       utils.FormatIntToAmount(filter.TotalAmountFrom),
					})
				</div>
				<div class="form-group col-md-3">
					@component.FormInput(component.FormInputParam{
						Id:          "totalAmountTo",
						Name:        "totalAmountTo",
						Description: "A Totale Fatturato",
						FormType:    component.Number,
						Value:       utils.FormatIntToAmount(filter.TotalAmountTo),
					})
				</div>
				<div class="form-group col-md-3">
					@component.FormInput(component.FormInputParam{
						Id:          "totalToPayFrom",
						Name:        "totalToPayFrom",
						Description: "Da Totale Da Pagare",
						FormType:    component.Number,
						Value:       utils.FormatIntToAmount(filter.TotalToPayFrom),
					})
				</div>
				<div class="form-group col-md-3">
					@component.FormInput(component.FormInputParam{
						Id:          "totalToPayTo",
						Name:        "totalToPayTo",
						Description: "A Totale Da Pagare",
						FormType:    component.Number,
						Value:       utils.FormatIntToAmount(filter.TotalToPayTo),
					})
				</div>
			</div>
			<div class="form-row">
				<div class="col-lg-12">
					<button type="submit" class="btn btn-primary">Filtra</button>
				</div>
			</div>
		</form>
	}
}

templ customerTable(items []repositories.CustomerWithTotals) {
	@component.CardComp() {
		<div class="table-responsive">
			<table class="table table-bordered" id="dataTable">
				<thead>
					<tr>
						<th>Name</th>
						<th>Telefono</th>
						<th>E-mail</th>
						<th style="text-align: right;">Totale fatturato</th>
						<th style="text-align: right;">Totale da pagare</th>
						<th></th>
					</tr>
				</thead>
				<tbody id="data">
					@AllCustomerRowsShow(items)
				</tbody>
			</table>
		</div>
	}
}

templ AllCustomerRowsShow(items []repositories.CustomerWithTotals) {
	for index, item := range items {
		if (index == len(items)-1) {
			@CustomerRowShowLast(item)
		} else {
			@CustomerRowShow(item)
		}
	}
}

templ CustomerRowShow(item repositories.CustomerWithTotals) {
	<tr>
		@customerColumns(item)
	</tr>
}

templ CustomerRowShowLast(item repositories.CustomerWithTotals) {
	<tr
		hx-get={ "/customer/filter?page=" + utils.GetNextPageNumber(ctx) }
		hx-trigger="revealed"
		hx-swap="afterend"
		hx-include="previous form"
	>
		@customerColumns(item)
	</tr>
}

templ customerColumns(item repositories.CustomerWithTotals) {
	<td>{ item.Name }</td>
	<td>{ item.Phone }</td>
	<td>{ item.Email }</td>
	<td style="text-align: right;">{ utils.AmountIntegerToString(item.TotalAmount) } €</td>
	<td style="text-align: right;">{ utils.AmountIntegerToString(item.TotalToPay) } €</td>
	<td style="text-align: center;">
		<a class="btn btn-circle btn-primary" href={ templ.SafeURL("/customer/" + utils.UintToString(item.ID) + "/info") }>
			<i class="fa-solid fa-info"></i>
		</a>
	</td>
}

templ CustomerSearchView(items []repositories.Customer) {
	for index, customer := range items {
		<div class="preview-item" data-index={ strconv.Itoa(index) } data-id={ utils.UintToString(customer.ID) }>{ customer.Name }</div>
	}
}

templ CustomerView(item repositories.Customer, invoiceList []repositories.Invoice, filter repositories.InvoiceFilter) {
	@layout.BaseView() {
		@CustomerData(item, invoiceList, filter)
	}
}

templ CustomerData(item repositories.Customer, invoiceList []repositories.Invoice, filter repositories.InvoiceFilter) {
	<div class="row">
		<div class="col-lg-6 mb-4">
			@component.TitledCardComp("Anagraphics") {
				<div class="form-row">
					<div class="form-group col-md-6">Name: { item.Name }</div>
					<div class="form-group col-md-6">Cognome: { item.Surname }</div>
				</div>
				<div class="form-group">Indirizzo: { item.Address }</div>
			}
		</div>
		<div class="col-lg-6 mb-4">
			@component.TitledCardComp("Contacts") {
				<div class="form-group">Email: { item.Email }</div>
				<div class="form-group">Phone: { item.Phone }</div>
			}
		</div>
	</div>
	@InvoiceFilter(filter, false)
	@InvoiceTable(invoiceList, true)
}

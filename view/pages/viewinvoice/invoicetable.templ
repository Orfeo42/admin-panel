package viewinvoice

import (
	"github.com/Orfeo42/admin-panel/mvc/repositories"
	"github.com/Orfeo42/admin-panel/view/component"
	"github.com/Orfeo42/admin-panel/utils"
)

type InvoiceTableParams struct {
	Items        []repositories.Invoice
	ShowCustomer bool
}

templ InvoiceTable(params InvoiceTableParams) {
	@component.CardComp() {
		<div class="table-responsive">
			<table class={ "table", "table-bordered", templ.KV("hideFirstColumn", !params.ShowCustomer) } id="dataTable">
				<thead>
					<tr>
						<th>Cliente</th>
						<th>Numero</th>
						<th>Data Fattura</th>
						<th style="text-align: right;">Importo Fattura</th>
						<th>Data Pagamento</th>
						<th style="text-align: right;">Importo Pagato</th>
						<th>Pagato</th>
						<th></th>
					</tr>
				</thead>
				<tbody id="data" hx-target="closest tr" hx-swap="outerHTML">
					@InvoiceRows(params.Items)
				</tbody>
			</table>
		</div>
	}
}

templ InvoiceRows(items []repositories.Invoice) {
	for index, item := range items {
		if (index == len(items)-1) {
			@invoiceRowLast(item)
		} else {
			@InvoiceRow(item)
		}
	}
}

templ InvoiceRow(item repositories.Invoice) {
	<tr>
		@invoiceColumns(item)
	</tr>
}

templ invoiceRowLast(item repositories.Invoice) {
	<tr
		hx-get={ "/invoice/filter?page=" + utils.GetNextPageNumber(ctx) }
		hx-trigger="revealed"
		hx-swap="afterend"
		hx-include="previous form"
	>
		@invoiceColumns(item)
	</tr>
}

templ invoiceColumns(item repositories.Invoice) {
	<td>{ item.Customer.Name }</td>
	<td style="text-align: right;">{ item.Number }</td>
	<td style="text-align: right;">{ utils.FormatTimePtrToTable(item.Date) }</td>
	<td style="text-align: right;">{ utils.AmountIntegerToString(item.Amount) } €</td>
	<td style="text-align: right;">{ utils.FormatTimePtrToTable(item.PaymentDate) }</td>
	<td style="text-align: right;">{ utils.AmountIntegerToString(item.PaidAmount) } €</td>
	<td style="text-align: center;">
		if item.Amount-item.PaidAmount == 0 {
			<div class="btn-success btn-circle" style="pointer-events: none;">
				<i class="fa-solid fa-check"></i>
			</div>
		} else {
			<button
				class="btn btn-danger btn-circle"
				hx-target="closest tr"
				hx-swap="outerHTML"
				hx-put={ "/invoice/" + utils.UintToString(item.ID) + "/pay" }
			>
				<i class="fa-solid fa-xmark"></i>
			</button>
		}
	</td>
	<td style="text-align: center">
		@invoiceEditButton(utils.UintToString(item.ID))
	</td>
}

type InvoiceRowEditParams struct {
	Item   repositories.Invoice
	Errors map[string]string
}

templ InvoiceRowEdit(params InvoiceRowEditParams) {
	<tr hx-trigger="cancel" class="editing" hx-get={ "/invoice/" + utils.UintToString(params.Item.ID) }>
		<td>
			@component.CustomerSearchInput(component.CustomerSearchInputParams{
				Id:            utils.UintToString(params.Item.ID),
				CustomerValue: utils.UintToString(params.Item.CustomerID),
				CustomerName:  params.Item.Customer.Name,
				ShowLabel:     false,
			})
		</td>
		<td>
			@component.Input(component.FormInputParam{
				Name:     "number",
				FormType: component.Text,
				Value:    params.Item.Number,
			})
		</td>
		<td>
			@component.Input(component.FormInputParam{
				Name:     "date",
				FormType: component.Date,
				Value:    utils.FormatTimePtrToForm(params.Item.Date),
			})
		</td>
		<td>
			@component.Input(component.FormInputParam{
				Name:     "amount",
				FormType: component.Number,
				Value:    utils.FormatAmount(params.Item.Amount),
			})
		</td>
		<td>
			@component.Input(component.FormInputParam{
				Name:     "paymentDate",
				FormType: component.Date,
				Value:    utils.FormatTimePtrToForm(params.Item.PaymentDate),
			})
		</td>
		<td>
			@component.Input(component.FormInputParam{
				Name:     "paidAmount",
				FormType: component.Number,
				Value:    utils.FormatAmount(params.Item.PaidAmount),
			})
		</td>
		<td style="text-align: center;"></td>
		<td style="white-space: nowrap; text-align: center">
			<button class="btn btn-primary" hx-put={ "/invoice/" + utils.UintToString(params.Item.ID) } hx-include="closest tr">
				<i class="fa-solid fa-floppy-disk"></i>
				Salva
			</button>
			<button class="btn btn-danger" hx-get={ "/invoice/" + utils.UintToString(params.Item.ID) }>
				<i class="fa-solid fa-xmark"></i>
				Annulla
			</button>
		</td>
	</tr>
}

templ invoiceEditButton(id string) {
	<button
		class="btn btn-primary"
		hx-get={ "/invoice/" + id + "/edit" }
		hx-trigger="edit"
		id={ "invoiceEditButton_" + id }
	>
		<i class="fa-regular fa-pen-to-square"></i> Modifica
	</button>
	@invoiceEditButtonScript(id)
}

script invoiceEditButtonScript(id string) {
    const editButton = document.getElementById(`invoiceEditButton_${id}`);

    function buttonEditClick(){
        let editing = document.querySelector('.editing')
        if(editing) {
            Swal.fire({
                title: 'Stai già modificando!',
                showCancelButton: true,
                confirmButtonText: 'Sì, Modifica questa riga!',
                text:'Stai già modificando un altra riga. Vuoi annullare per modificare questa?'
            }).then((result) => {
                if(result.isConfirmed) {
                    htmx.trigger(editing, 'cancel')
                    htmx.trigger(this, 'edit')
                }
            })
        } else {
            htmx.trigger(this, 'edit')
        }
    }

    editButton.addEventListener('click', buttonEditClick);
}

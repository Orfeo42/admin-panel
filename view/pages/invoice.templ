package pages

import (
	"github.com/Orfeo42/admin-panel/view/layout"
	"github.com/Orfeo42/admin-panel/mvc/repositories"
	"github.com/Orfeo42/admin-panel/utils"
	"github.com/Orfeo42/admin-panel/view/component"
)

templ InvoiceListView(items []repositories.Invoice, filter repositories.InvoiceFilter) {
	@layout.TableView() {
		<div class="row">
			<div class="col-12 mb-4">
				<h1 class="h3 mb-2 text-gray-800">Invoice List</h1>
			</div>
		</div>
		@component.CollapseCard("Filters", "filter") {
			<form hx-get="/invoice/filter" hx-target="#data" hx-swap="innerHTML">
				<div class="form-row">
					<div class="form-group col-md-6">
						@component.CustomerSearchInput(component.CustomerSearchInputParams{
							Id:            "filter",
							CustomerValue: "",
							CustomerName:  "",
							ShowLabel:     true,
						})
					</div>
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "number", Name: "number", Description: "Invoice number", FormType: component.Text, Value: utils.FormatStringToForm(filter.Number)})
					</div>
					<div class="form-group col-md-3">
						<label for="isPaid">Payment Status:</label>
						<select class="form-control" name="isPaid" id="isPaid">
							<option value="">Both</option>
							<option value="true">Is Paid</option>
							<option value="false">Is Not Paid</option>
						</select>
					</div>
				</div>
				<div class="form-row">
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "dateFrom", Name: "dateFrom", Description: "Date From", FormType: component.Date, Value: utils.FormatTimePToForm(filter.DateFrom)})
					</div>
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "dateTo", Name: "dateTo", Description: "Date To", FormType: component.Date, Value: utils.FormatTimePToForm(filter.DateTo)})
					</div>
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "paymentDateFrom", Name: "paymentDateFrom", Description: "Payment Date From", FormType: component.Date, Value: utils.FormatTimePToForm(filter.PaymentDateFrom)})
					</div>
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "paymentDateTo", Name: "paymentDateTo", Description: "Payment Date To", FormType: component.Date, Value: utils.FormatTimePToForm(filter.PaymentDateTo)})
					</div>
				</div>
				<div class="form-row">
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "amountFrom", Name: "amountFrom", Description: "Amount From", FormType: component.Number, Value: utils.FormatIntToFormNumber(filter.AmountFrom)})
					</div>
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "amountTo", Name: "amountTo", Description: "Amount To", FormType: component.Number, Value: utils.FormatIntToFormNumber(filter.AmountTo)})
					</div>
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "paidAmountFrom", Name: "paidAmountFrom", Description: "Paid Amount From", FormType: component.Number, Value: utils.FormatIntToFormNumber(filter.PaidAmountFrom)})
					</div>
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "paidAmountTo", Name: "paidAmountTo", Description: "Paid Amount To", FormType: component.Number, Value: utils.FormatIntToFormNumber(filter.PaidAmountTo)})
					</div>
				</div>
				<div class="form-row">
					<div class="col-lg-12">
						<button type="submit" class="btn btn-primary">Filter</button>
					</div>
				</div>
			</form>
		}
		<div class="row">
			<div class="col-12 mb-4" style="text-align: right;">
				<button type="submit" class="btn btn-primary" hx-get="/invoice/add" hx-target="body" hx-replace-url="true">
					<i class="fas fa-fw fa-plus"></i>
					Add new
				</button>
			</div>
		</div>
		@InvoiceTable(items, false)
	}
}

templ InvoiceTable(items []repositories.Invoice, hideFirstColumn bool) {
	@component.CardComp() {
		<div class="table-responsive">
			<table class={ "table", "table-bordered",templ.KV("hideFirstColumn", hideFirstColumn) } id="dataTable">
				<thead>
					<tr>
						<th>Customer</th>
						<th>Number</th>
						<th>Date</th>
						<th style="text-align: right;">Amount</th>
						<th>Payment Date</th>
						<th style="text-align: right;">Paid Amount</th>
						<th>Is Paid</th>
						<th></th>
					</tr>
				</thead>
				<tbody id="data" hx-target="closest tr" hx-swap="outerHTML">
					@AllInvoiceRowsShow(items)
				</tbody>
			</table>
		</div>
	}
}

templ AllInvoiceRowsShow(items []repositories.Invoice) {
	for index, item := range items {
		if (index == len(items)-1) {
			@invoiceRowShowLast(item)
		} else {
			@InvoiceRowShow(item)
		}
	}
}

templ InvoiceRowShow(item repositories.Invoice) {
	<tr>
		@invoiceRowShowColumns(item)
	</tr>
}

templ invoiceRowShowLast(item repositories.Invoice) {
	<tr
		hx-get={ "/invoice/filter?page=" + utils.GetNextPageNumber(ctx) }
		hx-trigger="revealed"
		hx-swap="afterend"
		hx-include="previous form"
	>
		@invoiceRowShowColumns(item)
	</tr>
}

templ invoiceRowShowColumns(item repositories.Invoice) {
	<td>{ item.Customer.Name }</td>
	<td style="text-align: right;">{ item.Number }</td>
	<td style="text-align: right;">{ utils.FormatTimePToTable(item.Date) }</td>
	<td style="text-align: right;">{ utils.AmountIntegerToString(item.Amount) } €</td>
	<td style="text-align: right;">{ utils.FormatTimePToTable(item.PaymentDate) }</td>
	<td style="text-align: right;">{ utils.AmountIntegerToString(item.PaidAmount) } €</td>
	<td style="text-align: center;">
		if item.Amount-item.PaidAmount == 0 {
			<div class="btn-success btn-circle" style="pointer-events: none;">
				<i class="fa-solid fa-check"></i>
			</div>
		} else {
			<button
				class="btn btn-danger btn-circle"
				hx-target="closest tr"
				hx-swap="outerHTML"
				hx-put={ "/invoice/" + utils.UintToString(item.ID) + "/pay" }
			>
				<i class="fa-solid fa-xmark"></i>
			</button>
		}
	</td>
	<td style="text-align: center">
		@component.InvoiceEditButton(utils.UintToString(item.ID))
	</td>
}

templ InvoiceRowEdit(item repositories.Invoice) {
	<tr hx-trigger="cancel" class="editing" hx-get={ "/invoice/" + utils.UintToString(item.ID) }>
		<td>
			@component.CustomerSearchInput(component.CustomerSearchInputParams{
				Id:            utils.UintToString(item.ID),
				CustomerValue: utils.UintToString(item.CustomerID),
				CustomerName:  item.Customer.Name,
				ShowLabel:     false,
			})
		</td>
		<td>
			@component.Input(component.FormInputParam{Name: "number", FormType: component.Text, Value: item.Number})
		</td>
		<td>
			@component.Input(component.FormInputParam{Name: "date", FormType: component.Date, Value: utils.FormatTimePToForm(item.Date)})
		</td>
		<td>
			@component.Input(component.FormInputParam{Name: "amount", FormType: component.Number, Value: utils.FormatAmount(item.Amount)})
		</td>
		<td>
			@component.Input(component.FormInputParam{Name: "paymentDate", FormType: component.Date, Value: utils.FormatTimePToForm(item.PaymentDate)})
		</td>
		<td>
			@component.Input(component.FormInputParam{Name: "paidAmount", FormType: component.Number, Value: utils.FormatAmount(item.PaidAmount)})
		</td>
		<td style="text-align: center;"></td>
		<td style="white-space: nowrap; text-align: center">
			<button class="btn btn-primary" hx-put={ "/invoice/" + utils.UintToString(item.ID) } hx-include="closest tr">
				<i class="fa-solid fa-floppy-disk"></i>
				Salva
			</button>
			<button class="btn btn-danger" hx-get={ "/invoice/" + utils.UintToString(item.ID) }>
				<i class="fa-solid fa-xmark"></i>
				Annulla
			</button>
		</td>
	</tr>
}

templ InvoiceView(item repositories.Invoice) {
	@layout.BaseView() {
		@InvoiceForm(item)
	}
}

templ InvoiceForm(item repositories.Invoice) {
	@component.TitledCardComp("New Invoice") {
		<form hx-post="/invoice" hx-target="this" hx-swap="outerHTML">
			<div class="form-row">
				<div class="form-group col-md-6">
					@component.FormInput(component.FormInputParam{Id: "customer", Name: "customer", Description: "Customer", FormType: component.Text, Value: utils.UintToString(item.CustomerID)})
				</div>
				<div class="form-group col-md-6">
					@component.FormInput(component.FormInputParam{Id: "number", Name: "number", Description: "Invoice number", FormType: component.Text, Value: item.Number})
				</div>
			</div>
			<div class="form-row">
				<div class="form-group col-md-6">
					@component.FormInput(component.FormInputParam{Id: "date", Name: "date", Description: "Date", FormType: component.Date, Value: utils.FormatTimePToForm(item.Date)})
				</div>
				<div class="form-group col-md-6">
					@component.FormInput(component.FormInputParam{Id: "paymentDate", Name: "paymentDate", Description: "Payment Date", FormType: component.Date, Value: utils.FormatTimePToForm(item.PaymentDate)})
				</div>
			</div>
			<div class="form-row">
				<div class="form-group col-md-6">
					@component.FormInput(component.FormInputParam{Id: "amount", Name: "amount", Description: "Amount", FormType: component.Number, Value: utils.FormatAmount(item.Amount)})
				</div>
				<div class="form-group col-md-6">
					@component.FormInput(component.FormInputParam{Id: "paidAmount", Name: "paidAmount", Description: "Paid Amount", FormType: component.Number, Value: utils.FormatAmount(item.PaidAmount)})
				</div>
			</div>
			<div class="form-row">
				<div class="col-lg-12">
					<button type="submit" class="btn btn-primary">Salva</button>
				</div>
			</div>
		</form>
	}
}

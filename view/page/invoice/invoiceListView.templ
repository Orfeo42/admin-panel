package invoice

import (
	"github.com/Orfeo42/admin-panel/view/layout"
	"github.com/Orfeo42/admin-panel/repositories"
	"github.com/Orfeo42/admin-panel/utils"
	"github.com/Orfeo42/admin-panel/view/component"
)

templ InvoiceListView(items []repositories.Invoice, filter repositories.InvoiceFilter) {
	@layout.TableView() {
		<div class="row">
			<div class="col-12 mb-4">
				<h1 class="h3 mb-2 text-gray-800">Invoice List</h1>
			</div>
		</div>
		@component.CollapseCard("Filters", "filter") {
			<form hx-get="/invoice/filter" hx-target="#data" hx-swap="innerHTML">
				<div class="form-row">
					<div class="form-group col-md-6">

                        <div id="search-container">
                            <label for="search-input">Customer</label>
                            <input class="form-control"
                                   type="search"
                                   name="name"
                                   id="search-input"
                                   placeholder="Cerca..."
                                   hx-get="/customer/search"
                                   hx-trigger="input changed delay:500ms, search"
                                   hx-target="#preview"
                            />
                            <div id="preview"></div>
                            <input type="hidden" id="selected-id" name="customerID" />
                        </div>

                        <script>
                            // Codice JavaScript per gestire la ricerca, l'anteprima e la selezione con la tastiera
                            const searchInput = document.getElementById('search-input');
                            const preview = document.getElementById('preview');
                            const selectedIdInput = document.getElementById('selected-id');
                            let selectedIndex = -1;


                            // Funzione per filtrare e visualizzare l'anteprima
                            function showPreview() {
                                //const matchedResults = previewData.filter(item => item.title.toLowerCase().includes(query.toLowerCase()));
                                //const html = matchedResults.map((item, index) => `<div class="preview-item" data-index="${index}" data-id="${item.id}" ${index === selectedIndex ? 'class="selected"' : ''}>${item.title}</div>`).join('');
                                //preview.innerHTML = html;
                                //const matchedResults = preview.querySelectorAll('.preview-item')
                                //preview.style.display = matchedResults.length ? 'block' : 'none';
                                preview.style.display = 'block';
                                //if (matchedResults.length && selectedIndex === -1) {
                                //    selectedIndex = 0;
                                //    preview.querySelector('.preview-item').classList.add('selected');
                                //}
                            }

                            searchInput.addEventListener('input', showPreview);

                            // Funzione per gestire la selezione dell'anteprima con la tastiera
                            function handleKeyboardNavigation(event) {
                                if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {
                                    event.preventDefault();
                                    const items = Array.from(document.querySelectorAll('#preview .preview-item'));
                                    if (event.key === 'ArrowDown') {
                                        selectedIndex = (selectedIndex + 1) % items.length;
                                    } else {
                                        selectedIndex = (selectedIndex - 1 + items.length) % items.length;
                                    }
                                    items.forEach((item, index) => {
                                        if (index === selectedIndex) {
                                            item.classList.add('selected');
                                        } else {
                                            item.classList.remove('selected');
                                        }
                                    });
                                } else if (event.key === 'Enter' && selectedIndex !== -1) {
                                    event.preventDefault();
                                    const selectedItem = document.querySelector(`#preview .preview-item[data-index="${selectedIndex}"]`);
                                    if (selectedItem) {
                                        searchInput.value = selectedItem.textContent;
                                        selectedIdInput.value = selectedItem.dataset.id;
                                        selectedIndex = -1;
                                        preview.style.display = 'none';
                                    }
                                }
                            }

                            // Evento di input per gestire la ricerca e visualizzare l'anteprima


                            function handlePreviewItemClick(event) {
                                const selectedItem = event.target;
                                const index = selectedItem.getAttribute('data-index');
                                if (index !== null) {
                                    selectedIndex = parseInt(index);
                                    searchInput.value = selectedItem.textContent;
                                    selectedIdInput.value = selectedItem.dataset.id;
                                    preview.style.display = 'none';
                                }
                            }

                            // Eventi di tastiera per la navigazione e la selezione dei risultati
                            searchInput.addEventListener('keydown', handleKeyboardNavigation);

                            preview.addEventListener('click', handlePreviewItemClick);
                        </script>

                        <!--

						<input type="hidden" name="customerID" value="" />
                        <div id="search-container">
                            <label for="search-input">Customer</label>
                            <input class="form-control"
                                   type="search"
                                   name="name"
                                   id="search-input"
                                   placeholder="Customer"
                                   hx-get="/customer/search"
                                   hx-trigger="input changed delay:500ms, search"
                                   hx-target="#preview" />
                            <div id="preview"></div>
                        </div>


                        <script>
                            // Codice JavaScript per gestire la ricerca e l'anteprima
                            const searchInput = document.getElementById('search-input');

                            // Funzione per filtrare e visualizzare l'anteprima
                            function showPreview() {
                                //preview.style.display = matchedResults.length ? 'block' : 'none';
                                preview.style.display = 'block';
                            }

                            searchInput.addEventListener('input', showPreview);
                        </script>
                        -->
					</div>
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "number", Name: "number", Description: "Invoice number", FormType: component.Text, Value: utils.FormatStringToForm(filter.Number)})
					</div>
					<div class="form-group col-md-3">
						<label for="isPaid">Payment Status:</label>
						<select class="form-control" name="isPaid" id="isPaid">
							<option value="">Both</option>
							<option value="true">Is Paid</option>
							<option value="false">Is Not Paid</option>
						</select>
					</div>
				</div>
				<div class="form-row">
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "dateFrom", Name: "dateFrom", Description: "Date From", FormType: component.Date, Value: utils.FormatTimePToForm(filter.DateFrom)})
					</div>
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "dateTo", Name: "dateTo", Description: "Date To", FormType: component.Date, Value: utils.FormatTimePToForm(filter.DateTo)})
					</div>
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "paymentDateFrom", Name: "paymentDateFrom", Description: "Payment Date From", FormType: component.Date, Value: utils.FormatTimePToForm(filter.PaymentDateFrom)})
					</div>
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "paymentDateTo", Name: "paymentDateTo", Description: "Payment Date To", FormType: component.Date, Value: utils.FormatTimePToForm(filter.PaymentDateTo)})
					</div>
				</div>
				<div class="form-row">
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "amountFrom", Name: "amountFrom", Description: "Amount From", FormType: component.Number, Value: utils.FormatIntToFormNumber(filter.AmountFrom)})
					</div>
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "amountTo", Name: "amountTo", Description: "Amount To", FormType: component.Number, Value: utils.FormatIntToFormNumber(filter.AmountTo)})
					</div>
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "paidAmountFrom", Name: "paidAmountFrom", Description: "Paid Amount From", FormType: component.Number, Value: utils.FormatIntToFormNumber(filter.PaidAmountFrom)})
					</div>
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "paidAmountTo", Name: "paidAmountTo", Description: "Paid Amount To", FormType: component.Number, Value: utils.FormatIntToFormNumber(filter.PaidAmountTo)})
					</div>
				</div>
				<div class="form-row">
					<div class="col-lg-12">
						<button type="submit" class="btn btn-primary">Filter</button>
					</div>
				</div>
			</form>
		}
		<div class="row">
			<div class="col-12 mb-4" style="text-align: right;">
				<button type="submit" class="btn btn-primary" hx-get="/invoice/add" hx-target="body" hx-replace-url="true">
					<i class="fas fa-fw fa-plus"></i>
					Add new
				</button>
			</div>
		</div>
		@InvoiceTable(items)
	}
}


templ InvoiceTable(items []repositories.Invoice) {
    @component.CardComp() {
        <div class="table-responsive">
            <table class="table table-bordered" id="dataTable">
                <thead>
                    <tr>
                        if utils.GetCustomerVisible(ctx){
                            <th>Customer</th>
                        }
                        <th>Number</th>
                        <th>Date</th>
                        <th>Payment Date</th>
                        <th>Amount</th>
                        <th>Paid Amount</th>
                        <th>Is Paid</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="data" hx-target="closest tr" hx-swap="outerHTML">
                    @AllInvoiceRowsShow(items)
                </tbody>
            </table>
        </div>
    }
}


templ AllInvoiceRowsShow(items []repositories.Invoice) {
	for _, item := range items {
		@InvoiceRowShow(item)
	}
}

templ InvoiceRowShow(item repositories.Invoice) {
	<tr>
        if utils.GetCustomerVisible(ctx){
		    <td>{ item.Customer.Name }</td>
        }
		<td style="text-align: right;">{ item.Number }</td>
		<td style="text-align: right;">{ utils.FormatTimePToTable(item.Date) }</td>
		<td style="text-align: right;">{ utils.FormatTimePToTable(item.PaymentDate) }</td>
		<td style="text-align: right;">{ utils.FormatAmount(item.Amount) } €</td>
		<td style="text-align: right;">{ utils.FormatAmount(item.PaidAmount) } €</td>
		<td style="text-align: center;">
			@isPaid(item.Amount-item.PaidAmount == 0)
		</td>
		<td style="text-align: center">
			<button
				class="btn btn-primary"
				hx-get={ "/invoice/" + utils.UintToString(item.ID) + "/edit" }
				hx-trigger="edit"
				onClick="let editing = document.querySelector('.editing')
                    if(editing) {
                        Swal.fire({
                            title: 'Already Editing',
                            showCancelButton: true,
                            confirmButtonText: 'Yep, Edit This Row!',
                            text:'Hey! You are already editing a row! Do you want to cancel that edit and continue?'
                        }).then((result) => {
                            if(result.isConfirmed) {
                                htmx.trigger(editing, 'cancel')
                                htmx.trigger(this, 'edit')
                            }
                        })
                    } else {
                        htmx.trigger(this, 'edit')
                    }"
			>
				<i class="fa-regular fa-pen-to-square"></i> Edit
			</button>
		</td>
	</tr>
}

templ InvoiceRowEdit(item repositories.Invoice) {
	<tr hx-trigger="cancel" class="editing" hx-get={ "/invoice/" + utils.UintToString(item.ID) }>
        if utils.GetCustomerVisible(ctx){
            <td>
                @component.Input(component.FormInputParam{Name: "customerID", Description: "Customer", FormType: component.Text, Value: item.Customer.Name})
            </td>
        }
		<td style="text-align: right;">
			@component.Input(component.FormInputParam{Name: "number", FormType: component.Text, Value: item.Number})
		</td>
		<td style="text-align: right;">
			@component.Input(component.FormInputParam{Name: "date", FormType: component.Date, Value: utils.FormatTimePToForm(item.Date)})
		</td>
		<td style="text-align: right;">
			@component.Input(component.FormInputParam{Name: "paymentDate", FormType: component.Date, Value: utils.FormatTimePToForm(item.PaymentDate)})
		</td>
		<td style="text-align: right;">
			@component.Input(component.FormInputParam{Name: "amount", FormType: component.Number, Value: utils.FormatAmount(item.Amount)})
		</td>
		<td style="text-align: right;">
			@component.Input(component.FormInputParam{Name: "paidAmount", FormType: component.Number, Value: utils.FormatAmount(item.PaidAmount)})
		</td>
		<td style="text-align: center;"></td>
		<td style="white-space: nowrap; text-align: center">
            if !utils.GetCustomerVisible(ctx) {
                <input type="hidden" name="customerID" value={ utils.UintToString(item.CustomerID) } />
            }
			<button class="btn btn-primary" hx-put={ "/invoice/" + utils.UintToString(item.ID) } hx-include="closest tr">
				<i class="fa-solid fa-floppy-disk"></i>
				Save
			</button>
			<button class="btn btn-danger" hx-get={ "/invoice/" + utils.UintToString(item.ID) }>
				<i class="fa-solid fa-xmark"></i>
				Cancel
			</button>
		</td>
	</tr>
}

templ isPaid(isPaid bool) {
	if isPaid {
		<div class="btn btn-success btn-circle">
			<i class="fa-solid fa-check"></i>
		</div>
		<!--
		    TODO SETTERE A PAGATO CON UN CLICK E APRIRE POPUP CHE CHIEDE LA DATA DI PAGAMENTO, NON OBBLIGATORIA
		    const { value: date } = await Swal.fire({
              title: "select departure date",
              input: "date",
              didOpen: () => {
                const today = (new Date()).toISOString();
                Swal.getInput().min = today.split("T")[0];
              }
            });
            if (date) {
              Swal.fire("Departure date", date);
            }
            -->
	} else {
		<div class="btn btn-danger btn-circle">
			<i class="fa-solid fa-xmark"></i>
		</div>
	}
}

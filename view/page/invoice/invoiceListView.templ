package invoice

import (
	"github.com/Orfeo42/admin-panel/view/layout"
	"github.com/Orfeo42/admin-panel/data"
	"github.com/Orfeo42/admin-panel/utils"
	"github.com/Orfeo42/admin-panel/view/component"
)

templ InvoiceListView(items []data.Invoice, filter data.InvoiceFilter) {
	@layout.TableView() {
		<div class="row">
			<div class="col-12 mb-4">
	        	<h1 class="h3 mb-2 text-gray-800">Invoice List</h1>
		    </div>
        </div>
		@component.CollapseCard("Filters", "filter") {
			<form hx-get="/invoice/filter" hx-target="#data" hx-swap="innerHTML">
				<div class="form-row">
					<div class="form-group col-md-6">
						@component.FormInput(component.FormInputParam{Id: "customer", Name: "customer", Description: "Customer", FormType: component.Text, Value: utils.FormatUintToFormString(filter.CustomerID)})
						<!--<input
								class="form-control"
								type="search"
								name="search"
								placeholder="Begin Typing To Search By customer..."
								hx-post="/search"
								hx-trigger="input changed delay:500ms, search"
								hx-target="#search-results"
								hx-indicator=".htmx-indicator"
							/>	-->
					</div>
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "number", Name: "number", Description: "Invoice number", FormType: component.Text, Value: utils.FormatStringToForm(filter.Number)})
					</div>
					<div class="form-group col-md-3">
						<label for="isPaid">Payment Status:</label>
						<select class="form-control" name="isPaid" id="isPaid">
							<option value="">Both</option>
							<option value="true">Is Paid</option>
							<option value="false">Is Not Paid</option>
						</select>
					</div>
				</div>
				<div class="form-row">
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "dateFrom", Name: "dateFrom", Description: "Date From", FormType: component.Date, Value: utils.FormatTimePToForm(filter.DateFrom)})
					</div>
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "dateTo", Name: "dateTo", Description: "Date To", FormType: component.Date, Value: utils.FormatTimePToForm(filter.DateTo)})
					</div>
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "paymentDateFrom", Name: "paymentDateFrom", Description: "Payment Date From", FormType: component.Date, Value: utils.FormatTimePToForm(filter.PaymentDateFrom)})
					</div>
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "paymentDateTo", Name: "paymentDateTo", Description: "Payment Date To", FormType: component.Date, Value: utils.FormatTimePToForm(filter.PaymentDateTo)})
					</div>
				</div>
				<div class="form-row">
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "amountFrom", Name: "amountFrom", Description: "Amount From", FormType: component.Number, Value: utils.FormatIntToFormNumber(filter.AmountFrom)})
					</div>
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "amountTo", Name: "amountTo", Description: "Amount To", FormType: component.Number, Value: utils.FormatIntToFormNumber(filter.AmountTo)})
					</div>
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "paidAmountFrom", Name: "paidAmountFrom", Description: "Paid Amount From", FormType: component.Number, Value: utils.FormatIntToFormNumber(filter.PaidAmountFrom)})
					</div>
					<div class="form-group col-md-3">
						@component.FormInput(component.FormInputParam{Id: "paidAmountTo", Name: "paidAmountTo", Description: "Paid Amount To", FormType: component.Number, Value: utils.FormatIntToFormNumber(filter.PaidAmountTo)})
					</div>
				</div>
				<div class="form-row">
					<div class="col-lg-12">
						<button type="submit" class="btn btn-primary">Filter</button>
					</div>
				</div>
			</form>
		}
		<div class="row">
			<div class="col-12 mb-4" style="text-align: right;">
                <button type="submit" class="btn btn-primary" hx-get="/invoice/add" hx-target="body" hx-replace-url="true">
                    <i class="fas fa-fw fa-plus"></i>
                    Add new
                </button>
            </div>
        </div>
		@component.CardComp() {
			<div class="table-responsive">
				<table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
					<thead>
						<tr>
							<th>Customer</th>
							<th>Number</th>
							<th>Date</th>
							<th>Payment Date</th>
							<th>Amount</th>
							<th>Paid Amount</th>
							<th>Is Paid</th>
							<th></th>
						</tr>
					</thead>
					<tbody id="data" hx-target="closest tr" hx-swap="outerHTML">
						@AllInvoiceRowsShow(items)
					</tbody>
				</table>
			</div>
		}
	}
}

templ InvoiceRowShow(item data.Invoice) {
	<tr>
		<td>{ item.Customer.Name }</td>
		<td style="text-align: right;">{ item.Number }</td>
		<td style="text-align: right;">{ utils.FormatTimePToTable(item.Date) }</td>
		<td style="text-align: right;">{ utils.FormatTimePToTable(item.PaymentDate) }</td>
		<td style="text-align: right;">{ utils.FormatAmount(item.Amount) } €</td>
		<td style="text-align: right;">{ utils.FormatAmount(item.PaidAmount) } €</td>
		<td style="text-align: center;">
			@isPaid(item.Amount-item.PaidAmount == 0)
		</td>
        <td>
            <button class="btn btn-danger"
                hx-get={"/invoice/" + utils.UintToString(item.ID) + "/edit"}
                hx-trigger="edit"
                onClick="let editing = document.querySelector('.editing')
                    if(editing) {
                        Swal.fire({
                            title: 'Already Editing',
                            showCancelButton: true,
                            confirmButtonText: 'Yep, Edit This Row!',
                            text:'Hey! You are already editing a row! Do you want to cancel that edit and continue?'
                        }).then((result) => {
                            if(result.isConfirmed) {
                                htmx.trigger(editing, 'cancel')
                                htmx.trigger(this, 'edit')
                            }
                        })
                    } else {
                        htmx.trigger(this, 'edit')
                    }">
                Edit
            </button>
        </td>
	</tr>
}

templ InvoiceRowEdit(item data.Invoice) {
	<tr hx-trigger="cancel" class="editing" hx-get={"/invoice/" + utils.UintToString(item.ID)}>
		<td>@component.Input(component.FormInputParam{Name: "customerID", Description: "Customer", FormType: component.Text, Value: item.Customer.Name})</td>
		<td style="text-align: right;">
		    @component.Input(component.FormInputParam{Name: "number", FormType: component.Text, Value: item.Number })
		</td>
		<td style="text-align: right;">
		    @component.Input(component.FormInputParam{Name: "date", FormType: component.Date, Value: utils.FormatTimePToForm(item.Date) })
        </td>
		<td style="text-align: right;">
		    @component.Input(component.FormInputParam{Name: "paymentDate", FormType: component.Date, Value: utils.FormatTimePToForm(item.PaymentDate) })
        </td>
		<td style="text-align: right;">
		    @component.Input(component.FormInputParam{Name: "amount", FormType: component.Number, Value: utils.FormatAmount(item.Amount) })
		</td>
		<td style="text-align: right;">
		    @component.Input(component.FormInputParam{Name: "paidAmount", FormType: component.Number, Value: utils.FormatAmount(item.PaidAmount) })
		</td>
		<td style="text-align: center;"></td>
        <td style="white-space: nowrap;">
            <button class="btn btn-danger" hx-get={"/invoice/" + utils.UintToString(item.ID)}>
                Cancel
            </button>
            <button class="btn btn-danger" hx-put={"/invoice/" + utils.UintToString(item.ID)} hx-include="closest tr">
                Save
            </button>
        </td>
	</tr>
}

templ AllInvoiceRowsShow(items []data.Invoice) {
	for _, item := range items {
		@InvoiceRowShow(item)
	}
}

templ isPaid(isPaid bool) {
	if isPaid {
		<div class="btn btn-success btn-circle">
			<i class="fas fa-check"></i>
		</div>
	} else {
		<div class="btn btn-danger btn-circle">
			<i class="fas fa-exclamation"></i>
		</div>
	}
}

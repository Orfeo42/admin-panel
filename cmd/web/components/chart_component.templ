package components

type AreaChartParams struct {
	XAxesLabels []string
	DataSets    []AreaChartDataset
}

type AreaChartDataset struct {
	Label                     string    `json:"label"`
	LineTension               float64   `json:"lineTension"`
	BackgroundColor           string    `json:"backgroundColor"`
	BorderColor               string    `json:"borderColor"`
	PointRadius               int       `json:"pointRadius"`
	PointBackgroundColor      string    `json:"pointBackgroundColor"`
	PointBorderColor          string    `json:"pointBorderColor"`
	PointHoverRadius          int       `json:"pointHoverRadius"`
	PointHoverBackgroundColor string    `json:"pointHoverBackgroundColor"`
	PointHoverBorderColor     string    `json:"pointHoverBorderColor"`
	PointHitRadius            int       `json:"pointHitRadius"`
	PointBorderWidth          int       `json:"pointBorderWidth"`
	Data                      []float64 `json:"data"`
}

func LoadBlueData(label string, data []float64) AreaChartDataset {
	return AreaChartDataset{
		Label:                     label,
		LineTension:               0.3,
		BackgroundColor:           "rgba(78, 115, 223, 0.05)",
		BorderColor:               "rgba(78, 115, 223, 1)",
		PointRadius:               3,
		PointBackgroundColor:      "rgba(78, 115, 223, 1)",
		PointBorderColor:          "rgba(78, 115, 223, 1)",
		PointHoverRadius:          3,
		PointHoverBackgroundColor: "rgba(78, 115, 223, 1)",
		PointHoverBorderColor:     "rgba(78, 115, 223, 1)",
		PointHitRadius:            10,
		PointBorderWidth:          2,
		Data:                      data,
	}
}

func LoadRedData(label string, data []float64) AreaChartDataset {
	return AreaChartDataset{
		Label:                     label,
		LineTension:               0.3,
		BackgroundColor:           "rgba(222, 78, 78, 0.05)",
		BorderColor:               "rgba(222, 78, 78, 1)",
		PointRadius:               3,
		PointBackgroundColor:      "rgba(222, 78, 78, 1)",
		PointBorderColor:          "rgba(222, 78, 78, 1)",
		PointHoverRadius:          3,
		PointHoverBackgroundColor: "rgba(222, 78, 78, 1)",
		PointHoverBorderColor:     "rgba(222, 78, 78, 1)",
		PointHitRadius:            10,
		PointBorderWidth:          2,
		Data:                      data,
	}
}

func LoadGreenData(label string, data []float64) AreaChartDataset {
	return AreaChartDataset{
		Label:                     label,
		LineTension:               0.3,
		BackgroundColor:           "rgba(66, 194, 84, 0.05)",
		BorderColor:               "rgba(66, 194, 84, 1)",
		PointRadius:               3,
		PointBackgroundColor:      "rgba(66, 194, 84, 1)",
		PointBorderColor:          "rgba(66, 194, 84, 1)",
		PointHoverRadius:          3,
		PointHoverBackgroundColor: "rgba(66, 194, 84, 1)",
		PointHoverBorderColor:     "rgba(66, 194, 84, 1)",
		PointHitRadius:            10,
		PointBorderWidth:          2,
		Data:                      data,
	}
}

templ AreaChart(id string, areaChartParams AreaChartParams) {
	<div class="chart-area">
		<canvas id={ id }></canvas>
	</div>
	@areaChartScript(id, areaChartParams)
}

script areaChartScript(id string, areaChartParams AreaChartParams) {

    Chart.defaults.global.defaultFontFamily = 'Nunito', '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
    Chart.defaults.global.defaultFontColor = '#858796';

    function number_format(number, decimals, dec_point, thousands_sep) {
      number = (number + '').replace(',', '').replace(' ', '');
      let n = !isFinite(+number) ? 0 : +number,
          prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
          sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
          dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
          s = '',
          toFixedFix = function (n, prec) {
            var k = Math.pow(10, prec);
            return '' + Math.round(n * k) / k;
          };
      s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
      if (s[0].length > 3) {
        s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
      }
      if ((s[1] || '').length < prec) {
        s[1] = s[1] || '';
        s[1] += new Array(prec - s[1].length + 1).join('0');
      }
      return s.join(dec);
    }

    // Area Chart Example
    const ctx = document.getElementById(id);
    new Chart(ctx, {
      type: 'line',
      data: {
        labels: areaChartParams.XAxesLabels,
        datasets: areaChartParams.DataSets,
      },
      options: {
        maintainAspectRatio: false,
        layout: {
          padding: {
            left: 10,
            right: 25,
            top: 25,
            bottom: 0
          }
        },
        scales: {
          xAxes: [{
            time: {
              unit: 'date'
            },
            gridLines: {
              display: false,
              drawBorder: false
            },
            ticks: {
              maxTicksLimit: 7
            }
          }],
          yAxes: [{
            ticks: {
              maxTicksLimit: 5,
              padding: 10,
              callback: function (value, index, values) {
                return '€' + number_format(value);
              }
            },
            gridLines: {
              color: "rgb(234, 236, 244)",
              zeroLineColor: "rgb(234, 236, 244)",
              drawBorder: false,
              borderDash: [2],
              zeroLineBorderDash: [2]
            }
          }],
        },
        legend: {
          display: true
        },
        tooltips: {
          backgroundColor: "rgb(255,255,255)",
          bodyFontColor: "#858796",
          titleMarginBottom: 10,
          titleFontColor: '#6e707e',
          titleFontSize: 14,
          borderColor: '#dddfeb',
          borderWidth: 1,
          xPadding: 15,
          yPadding: 15,
          displayColors: false,
          intersect: false,
          mode: 'index',
          caretPadding: 10,
          callbacks: {
            label: function (tooltipItem, chart) {
              const datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';
              return datasetLabel + ': €' + number_format(tooltipItem.yLabel);
            }
          }
        }
      }
    });
}

type PieChartData struct {
	Labels      []string
	Data        []float64
	Colors      []string
	HoverColors []string
}

templ PieChart(id string, pieChartData PieChartData) {
	<div class="chart-pie pt-4 pb-2">
		<canvas id={ id }></canvas>
	</div>
	<div class="mt-4 text-center small">
		<span class="mr-2">
			<i class="fas fa-circle text-primary"></i> Direct
		</span>
		<span class="mr-2">
			<i class="fas fa-circle text-success"></i> Social
		</span>
		<span class="mr-2">
			<i class="fas fa-circle text-info"></i> Referral
		</span>
	</div>
	@pieChartScript(id, pieChartData)
}

script pieChartScript(id string, pieChartData PieChartData) {
    // Set new default font family and font color to mimic Bootstrap's default styling
    Chart.defaults.global.defaultFontFamily = 'Nunito', '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
    Chart.defaults.global.defaultFontColor = '#858796';

    // Pie Chart Example
    const ctx = document.getElementById(id);
    const myPieChart = new Chart(ctx, {
      type: 'doughnut',
      data: {
        labels: pieChartData.Labels,
        datasets: [{
          data: pieChartData.Data,
          backgroundColor: pieChartData.Colors,
          hoverBackgroundColor: pieChartData.HoverColors,
          hoverBorderColor: "rgba(234, 236, 244, 1)",
        }],
      },
      options: {
        maintainAspectRatio: false,
        tooltips: {
          backgroundColor: "rgb(255,255,255)",
          bodyFontColor: "#858796",
          borderColor: '#dddfeb',
          borderWidth: 1,
          xPadding: 15,
          yPadding: 15,
          displayColors: false,
          caretPadding: 10,
        },
        legend: {
          display: false
        },
        cutoutPercentage: 80,
      },
    });

}

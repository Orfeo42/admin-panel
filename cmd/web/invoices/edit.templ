package invoices

import (
	"admin-panel/cmd/web/components"
	"admin-panel/internal/database"
	"admin-panel/utils"
)

type InvoiceEditParams struct {
	Invoice database.Invoice
	Errors  map[string]string
}

func getErrorString(errorMap map[string]string, key string) string {
	if value, found := errorMap[key]; found {
		return value
	}
	return ""
}

templ InvoiceRowEdit(params InvoiceEditParams) {
	<tr hx-trigger="cancel" class="editing" hx-get={ "/invoice/" + utils.UintToString(params.Invoice.ID) }>
		@InvoiceRowForm(params)
		<td style="white-space: nowrap; text-align: center">
			<button
				class="btn btn-primary"
				hx-put={ "/invoice/" + utils.UintToString(params.Invoice.ID) }
				hx-include="closest tr"
			>
				<i class="fa-solid fa-floppy-disk"></i>
				Salva
			</button>
		</td>
		<td>
			<button class="btn btn-danger" hx-get={ "/invoice/" + utils.UintToString(params.Invoice.ID) + "/row" }>
				<i class="fa-solid fa-xmark"></i>
				Annulla
			</button>
		</td>
	</tr>
}

templ InvoiceRowAdd(params InvoiceEditParams) {
	<tr hx-trigger="cancel" class="editing" hx-post={ "/invoice" }>
		@InvoiceRowForm(params)
		<td style="white-space: nowrap; text-align: center">
			<button
				class="btn btn-primary"
				hx-post={ "/invoice" }
				hx-include="closest tr"
			>
				<i class="fa-solid fa-floppy-disk"></i>
				Salva
			</button>
		</td>
		<td>
			<button class="btn btn-danger">
				<i class="fa-solid fa-xmark"></i>
				Annulla
			</button>
		</td>
	</tr>
}

templ InvoiceRowForm(params InvoiceEditParams) {
	<td>
		@components.CustomerSearchInput(components.CustomerSearchInputParams{
			Id:            utils.UintToString(params.Invoice.ID),
			CustomerValue: utils.UintToString(params.Invoice.CustomerID),
			CustomerName:  params.Invoice.Customer.Name,
			ShowLabel:     false,
			ErrorString:   getErrorString(params.Errors, "number"),
		})
	</td>
	<td>
		@components.Input(components.FormInputParam{
			Name:        "number",
			FormType:    components.Text,
			Value:       params.Invoice.Number,
			ErrorString: getErrorString(params.Errors, "number"),
		})
	</td>
	<td>
		@components.Input(components.FormInputParam{
			Name:     "date",
			FormType: components.Date,
			Value:    utils.FormatTimePtrToForm(params.Invoice.Date),
		})
	</td>
	<td>
		@components.Input(components.FormInputParam{
			Name:     "amount",
			FormType: components.Number,
			Value:    utils.FormatAmount(params.Invoice.Amount),
		})
	</td>
	<td>
		@components.Input(components.FormInputParam{
			Name:     "paymentDate",
			FormType: components.Date,
			Value:    utils.FormatTimePtrToForm(params.Invoice.PaymentDate),
		})
	</td>
	<td>
		@components.Input(components.FormInputParam{
			Name:        "paidAmount",
			FormType:    components.Number,
			Value:       utils.FormatAmount(params.Invoice.PaidAmount),
			ErrorString: getErrorString(params.Errors, "PaidAmount"),
		})
	</td>
	<td style="text-align: center;"></td>
}

templ invoiceEditButton(id string) {
	<button
		class="btn btn-primary invoice-edit-button"
		hx-get={ "/invoice/" + id + "/edit" }
		hx-trigger="edit"
	>
		<i class="fa-regular fa-pen-to-square"></i> Modifica
	</button>
}

templ invoiceDeleteButton(id string) {
	<button class="btn btn-danger invoice-delete-button" hx-trigger="delete" hx-delete={ "/invoice/" + id }>
		<i class="fa-regular fa-trash-can"></i> Elimina
	</button>
}

templ invoicePayButton(id string, amountToPay int) {
	if amountToPay == 0 {
		@payedButton()
	} else {
		@toPayButton(id)
	}
}

templ payedButton() {
	<div class="btn-success btn-circle" style="pointer-events: none;">
		<i class="fa-solid fa-check"></i>
	</div>
}

templ toPayButton(id string) {
	<button
		class="btn btn-danger btn-circle invoice-pay-button"
		hx-target="closest tr"
		hx-swap="outerHTML"
		hx-trigger="pay"
		hx-put={ "/invoice/" + id + "/pay" }
	>
		<i class="fa-solid fa-xmark"></i>
	</button>
}
